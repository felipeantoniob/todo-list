import { motion } from 'framer-motion'
import Head from 'next/head'
import React, { useEffect, useState } from 'react'
import { Col, Container, Row } from 'react-bootstrap'
import { fadeInUp } from '../animations/index'
import ToDoForm from '../components/ToDoForm'
import ToDoList from '../components/ToDoList'
import { ToDoProps } from '../interfaces'

export default function Home() {
  // const initialState = JSON.parse(localStorage.getItem('toDos')) || []
  const [toDos, setToDos] = useState<ToDoProps[]>([])
  const [filteredToDos, setFilteredToDos] = useState<ToDoProps[]>([])
  const [status, setStatus] = useState('all')
  const [editToDo, setEditToDo] = useState(null)
  const [theme, setTheme] = useState('light')

  useEffect(() => {
    getLocalToDos()
    getLocalTheme()
  }, [])

  useEffect(() => {
    filterHandler()
    saveLocalToDos()
  }, [toDos, status])

  const filterHandler = () => {
    switch (status) {
      case 'completed':
        setFilteredToDos(toDos.filter((toDo) => toDo.completed === true))
        break
      case 'uncompleted':
        setFilteredToDos(toDos.filter((toDo) => toDo.completed === false))
        break
      default:
        setFilteredToDos(toDos)
        break
    }
  }

  const saveLocalToDos = () => {
    localStorage.setItem('toDos', JSON.stringify(toDos))
  }

  const getLocalToDos = () => {
    if (localStorage.getItem('toDos') === null) {
      localStorage.setItem('toDos', JSON.stringify([]))
    } else {
      const toDoLocal = JSON.parse(localStorage.getItem('toDos'))
      setToDos(toDoLocal)
    }
  }

  const getLocalTheme = () => {
    if (localStorage.getItem('theme') === null) {
      localStorage.setItem('theme', 'light')
    } else {
      const themeLocal = localStorage.getItem('theme')
      // console.log(localStorage.getItem('theme'))
      setTheme(themeLocal)
    }
  }

  const themeSwitcher = () => {
    if (theme === 'dark') {
      setTheme('light')
      localStorage.setItem('theme', 'light')
    } else if (theme === 'light') {
      setTheme('dark')
      localStorage.setItem('theme', 'dark')
    }
  }

  return (
    <>
      <Head>
        <title>To-Do List</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={theme === 'dark' ? 'dark-mode' : 'light-mode'}>
        <motion.div initial="initial" animate="animate" exit={{ opacity: 0 }}>
          <Container className="min-vh-100 pb-5">
            <motion.div initial="initial" animate="animate" variants={fadeInUp}>
              <h1 className="text-center py-5">To-Do List</h1>
              <Row className="justify-content-center mb-5">
                <Col xs="auto">
                  <div className="form-check form-switch" onChange={themeSwitcher}>
                    <input className="form-check-input" type="checkbox" id="themeSwitch" />
                    <label className="form-check-label" htmlFor="themeSwitch">
                      {theme === 'dark' ? (
                        <>
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="16"
                            height="16"
                            fill="currentColor"
                            className="bi bi-moon-fill"
                            viewBox="0 0 16 16"
                          >
                            <path d="M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278z" />
                          </svg>
                        </>
                      ) : (
                        <>
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="16"
                            height="16"
                            fill="currentColor"
                            className="bi bi-brightness-high-fill"
                            viewBox="0 0 16 16"
                          >
                            <path d="M12 8a4 4 0 1 1-8 0 4 4 0 0 1 8 0zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z" />
                          </svg>
                        </>
                      )}
                    </label>
                  </div>
                </Col>
              </Row>
              <Row className="justify-content-center align-items-center mb-5">
                <ToDoForm
                  toDos={toDos}
                  setToDos={setToDos}
                  setStatus={setStatus}
                  editToDo={editToDo}
                  setEditToDo={setEditToDo}
                />
              </Row>
            </motion.div>
            <Row className="px-2">
              <ToDoList
                setToDos={setToDos}
                toDos={toDos}
                filteredToDos={filteredToDos}
                setEditToDo={setEditToDo}
              />
            </Row>
          </Container>
        </motion.div>
      </main>
    </>
  )
}
